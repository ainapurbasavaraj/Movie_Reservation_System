***************************** OM NAMAH SHIVAYA **********************

MOVIE TICKET RESERVATION

REQUIREMENTS

Searching

Search catalogue
Search based on 
location : Movie - Theatre - timing- Available seats
Location : Theatre - Movie - timing - Available seats


	Search based on location - Should return Movies and theatres

	Select Movies/theatre - Return timings

	Select timings - return seats.



	Return Proposal ID;

		Key :  Value

		ID : (Location, theatre, movie, timing, Seat)


Signup:

Take user details - Name, emailid, Userid, Password

Return - Success or failure if user already exist.

               Check email id already exist.

Login:

	Login with username and password

	Server will return access token - 10 mins

	Add refresh token (If possible)


Booking

Book with Proposal Id
Proposal ID, Session ID
Ask for payment
Submit the payment
Return Booked details (Ticket details - Ticket number, Movie details)


	Non Happy flow:

	 1. Booking failed

		a. Seat already booked due to concurrent booking.

		b. Payment failed

****************************************************************************************************************



REST API DESIGN - Rest principles.

showdetails : {
	showtime : datetime,
	seatnumbers : [integer]
}

price : {
	amount : integer,
	currency : string,
}

GET - http:/localhost/reservationService/location - Return all the locations
      Response:
	{
		locations: [{
		    	locationid : string,
			locationname : string,
		}]
	}
      http:/localhost/reservationService/movies?locationId={locationId} - return  movies - theatres - showtime and available seats
	Response:
	{
		movies: [{
			movieId : string,
			moviename : string,
			theatres : [{
				theatreid : string,
				theatrename : string,
				theatretype : [PVR, IMAX, INOX]
				Address : string,
				available slots : [showdetails],
				price : price
			}],
			
		}]
	}
      http:/localhost/reservationService/theatres?locationId={locationId} - return theatres - movies - showtime and available seats

      Responses:
	{
		theatres: [{
			theatreid : string,
			theatreName : string,
			theatretype : [PVR, IMAX, INOX],
			Address : string,
			movies : [{
				movieName : string,
				movieId : string,
				available slots : [showdetails],
				price : price
			}],
			
		}]
	}


POST -  http:/localhost/reservationService/bookticket
	{
		location : string,
		theatreId : string,
		movieId : string,
		available slot : [showdetails],
           
	}

	Response : 
	{
		booking details : {
		status : string,
		bookingid : string,
		theatreName : string,
		theatretype : [PVR, IMAX, INOX],
		Address : string,
		moviename : string,
		showdetails : showdetails,
		bookingAmount : price,
		}
	}
	

Payment:
POST - http:/localhost/reservationService/payment
	{
		bookingId : string,
		bookingAmount : price
	}

	Response:
	{
		status : [SUCCESS, FAILURE],
		bookingId : string,
		bookingAmount : price
	}

POST -  http:/localhost/reservationService/confirmticket
	{
		bookingId : string,
	}


signup - 

POST - http:/localhost/reservationService/register
	{
		userid : string,
		name : string,
		password : string,
		emailid : string,
		phoneNumber : alphanumeric
	}

	Response:
	{
		status : [SUCCESS, FAILURE],
		
	}

Login - 
POST -  http:/localhost/reservationService/login
	{
		userid : string,
		password: string
	}

	Response:
	{
		accesstoken : string
	}

// Server will generate access token after login and stores accesstoken and timevalidity.
// Then on subsequent requests, Server verifies the accesstoken to authorize the user and refersh the token periodically (extend the time)

Logout - 
DELETE - http:/localhost/reservationService/logout
	{
		userid : string
	}

****************************************************************************************************************



DATABASE DESIGN



APPLICATION DESIGN
